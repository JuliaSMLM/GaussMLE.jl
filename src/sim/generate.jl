
"""
    poissonnoise!(stack)

Add Poisson noise to a 3D stack of images.

- `stack::Array{T}`: The 3D stack to which Poisson noise will be added.

The function modifies `stack` in-place and returns `nothing`.
"""
function genroi!(box::AbstractMatrix{T}, θ::GaussMLEParams{T}, args::GaussMLEArgs{T}) where T <: Real
    for i in 1:size(box,1)
        for j in 1:size(box,2)
            box[i,j] = model(θ, args, i, j)
        end
    end
    return nothing
end


"""
    genstack(boxsize, stackdepth, θ, args; poissonnoise=false)

Generate a 3D stack of images based on the given Gaussian model parameters `θ` and additional arguments `args`.


Each slice in the stack is a 2D ROI generated by the model.

# Arguments
- `boxsize::Int`: The size of each side of the square 2D ROI.
- `stackdepth::Int`: The number of slices in the 3D stack.
- `θ::Vector{<:GaussMLEParams{T}}`: A vector of instances of types that inherit from `GaussMLEParams` containing the model parameters for each slice.
- `args::GaussMLEArgs{T}`: An instance of a type that inherits from `GaussMLEArgs` containing model-specific arguments.
- `poissonnoise::Bool` (optional): Whether to add Poisson noise to the stack (default is `false`).

# Returns
- The generated 3D stack.
"""
function genstack(boxsize::Int, stackdepth::Int, θ::Vector{<:GaussMLEParams{T}}, args::GaussMLEArgs{T}; poissonnoise::Bool=false) where T <: Real
    stack = zeros(T,boxsize, boxsize, stackdepth)
    for i in 1:stackdepth
        genroi!(view(stack, :,:,i), θ[i], args)
    end    
    if poissonnoise
        poissonnoise!(stack)
    end
    return stack
end


"""
    genstack(boxsize, stackdepth, modelsymbol; T=Float32, poissonnoise=false)

Generate a 3D stack of images based on a pre-defined Gaussian model identified by `modelsymbol`.

Default values will be used for the model paramters. 
    
# Arguments
- `boxsize::Int`: The size of each side of the square 2D ROI.
- `stackdepth::Int`: The number of slices in the 3D stack.
- `modelsymbol::Symbol`: A symbol identifying the Gaussian model to use.
- `T::Type{<:Real}` (optional): The type of real numbers to use (default is `Float32`).
- `poissonnoise::Bool` (optional): Whether to add Poisson noise to the stack (default is `false`).

# Returns
- A tuple containing the generated 3D stack, the vector of model parameters for each slice, and the model-specific arguments.
"""
function genstack(boxsize::Int, stackdepth::Int, modelsymbol::Symbol; T::Type{<:Real} = Float32, poissonnoise::Bool = false)  
    modeltype = get(MODEL_MAP, modelsymbol, -1)
    if modeltype == -1
        error("Model symbol not found")
    end     
    args = genargs(modeltype; T)
    θ = [genθ(modeltype, boxsize; T) for i in 1:stackdepth]
    stack = genstack(boxsize, stackdepth, θ, args; poissonnoise=poissonnoise)
    return stack, θ, args
end


"""
    poissonnoise!(stack)

Add Poisson noise to a 3D stack of images.

# Arguments
- `stack::Array{T}`: The 3D stack to which Poisson noise will be added.

# Returns
- Modifies `stack` in-place and returns `nothing`.
"""
function poissonnoise!(stack::Array{T}) where T <: Real
    for idx in eachindex(stack)
        stack[idx] = rand(Poisson(stack[idx]))
    end
    return nothing
end



