var documenterSearchIndex = {"docs":
[{"location":"GaussSim/","page":"GaussSim","title":"GaussSim","text":"CurrentModule = GaussMLE.GaussSim\nDocTestSetup = quote\n    using GaussSim\nend","category":"page"},{"location":"GaussSim/#GaussMLE.GaussSim","page":"GaussSim","title":"GaussMLE.GaussSim","text":"","category":"section"},{"location":"GaussSim/#Overview","page":"GaussSim","title":"Overview","text":"","category":"section"},{"location":"GaussSim/","page":"GaussSim","title":"GaussSim","text":"GaussSim","category":"page"},{"location":"GaussSim/#GaussMLE.GaussSim","page":"GaussSim","title":"GaussMLE.GaussSim","text":"GaussSim\n\nMethods for creating simulated data for testing and benchmarking.\n\n\n\n\n\n","category":"module"},{"location":"GaussSim/#API","page":"GaussSim","title":"API","text":"","category":"section"},{"location":"GaussSim/","page":"GaussSim","title":"GaussSim","text":"Modules = [GaussSim]","category":"page"},{"location":"GaussSim/","page":"GaussSim","title":"GaussSim","text":"Modules = [GaussSim]","category":"page"},{"location":"GaussSim/#GaussMLE.GaussSim.genroi!-Union{Tuple{T}, Tuple{AbstractMatrix{T}, GaussMLE.GaussModel.GaussMLEParams{T}, GaussMLE.GaussModel.GaussMLEArgs{T}}} where T<:Real","page":"GaussSim","title":"GaussMLE.GaussSim.genroi!","text":"poissonnoise!(stack)\n\nAdd Poisson noise to a 3D stack of images.\n\nstack::Array{T}: The 3D stack to which Poisson noise will be added.\n\nThe function modifies stack in-place and returns nothing.\n\n\n\n\n\n","category":"method"},{"location":"GaussSim/#GaussMLE.GaussSim.genstack-Tuple{Int64, Int64, Symbol}","page":"GaussSim","title":"GaussMLE.GaussSim.genstack","text":"genstack(boxsize, stackdepth, modelsymbol; T=Float32, poissonnoise=false)\n\nGenerate a 3D stack of images based on a pre-defined Gaussian model identified by modelsymbol.\n\nDefault values will be used for the model paramters. \n\nArguments\n\nboxsize::Int: The size of each side of the square 2D ROI.\nstackdepth::Int: The number of slices in the 3D stack.\nmodelsymbol::Symbol: A symbol identifying the Gaussian model to use.\nT::Type{<:Real} (optional): The type of real numbers to use (default is Float32).\npoissonnoise::Bool (optional): Whether to add Poisson noise to the stack (default is false).\n\nReturns\n\nA tuple containing the generated 3D stack, the vector of model parameters for each slice, and the model-specific arguments.\n\n\n\n\n\n","category":"method"},{"location":"GaussSim/#GaussMLE.GaussSim.genstack-Union{Tuple{T}, Tuple{Int64, Int64, Vector{<:GaussMLE.GaussModel.GaussMLEParams{T}}, GaussMLE.GaussModel.GaussMLEArgs{T}}} where T<:Real","page":"GaussSim","title":"GaussMLE.GaussSim.genstack","text":"genstack(boxsize, stackdepth, θ, args; poissonnoise=false)\n\nGenerate a 3D stack of images based on the given Gaussian model parameters θ and additional arguments args.\n\nEach slice in the stack is a 2D ROI generated by the model.\n\nArguments\n\nboxsize::Int: The size of each side of the square 2D ROI.\nstackdepth::Int: The number of slices in the 3D stack.\nθ::Vector{<:GaussMLEParams{T}}: A vector of instances of types that inherit from GaussMLEParams containing the model parameters for each slice.\nargs::GaussMLEArgs{T}: An instance of a type that inherits from GaussMLEArgs containing model-specific arguments.\npoissonnoise::Bool (optional): Whether to add Poisson noise to the stack (default is false).\n\nReturns\n\nThe generated 3D stack.\n\n\n\n\n\n","category":"method"},{"location":"GaussSim/#GaussMLE.GaussSim.poissonnoise!-Union{Tuple{Array{T}}, Tuple{T}} where T<:Real","page":"GaussSim","title":"GaussMLE.GaussSim.poissonnoise!","text":"poissonnoise!(stack)\n\nAdd Poisson noise to a 3D stack of images.\n\nArguments\n\nstack::Array{T}: The 3D stack to which Poisson noise will be added.\n\nReturns\n\nModifies stack in-place and returns nothing.\n\n\n\n\n\n","category":"method"},{"location":"GaussModel/","page":"GaussModel","title":"GaussModel","text":"CurrentModule = GaussMLE.GaussModel\nDocTestSetup = quote\n    using GaussMLE\nend","category":"page"},{"location":"GaussModel/#GaussMLE.GaussModel","page":"GaussModel","title":"GaussMLE.GaussModel","text":"","category":"section"},{"location":"GaussModel/#Overview","page":"GaussModel","title":"Overview","text":"","category":"section"},{"location":"GaussModel/","page":"GaussModel","title":"GaussModel","text":"GaussModel","category":"page"},{"location":"GaussModel/#GaussMLE.GaussModel","page":"GaussModel","title":"GaussMLE.GaussModel","text":"GaussModel\n\nThe GaussModel module offers a unified framework for defining, manipulating,  and fitting Gaussian models to data. It prescribes a set of abstract types,  concrete model types, and function signatures that are expected for fitting and simulation codes.\n\nAbstract Types Hierarchy\n\nGaussMLEParams{T}: An abstract type for the parameters of a Gaussian model.\nGaussMLEArgs{T}: An abstract type for model-specific arguments, such as non-fitted parameters.\nGaussMLEΣ{T}: An abstract type for representing the uncertainty associated with a Gaussian model.\n\nRequired Methods\n\nEach concrete Gaussian model, such as :xynb, must implement the following methods:\n\nmodel(θ, args, i, j): Calculates the model's predicted intensity at pixel locations (i, j) based on the parameters θ and additional arguments args.\ngradient!(θ, args, out, i, j): Computes and stores the gradient of the model with respect to its parameters at pixel locations (i, j) in the out array.\ncurvature!(θ, args, out, i, j): Computes and stores the diagonal elements of the model's Hessian matrix (curvature) at pixel locations (i, j) in the out array.\ninitialize_parameters!(θ, data, boxsize, args): Initializes the parameters of the model type based on the provided 2D data matrix, box size, and additional arguments args.\nupdate!(θ, numerator, denominator): Updates the model parameters based on provided numerator and denominator arrays, typically sums of gradients and curvatures over data points.\ngenargs(::Type{θ}, args): Returns an instance of the model-specific GaussMLEArgs type.\ngenθ(::Type{θ}, boxsize): Returns an instance of the θ_xynbs type, initialized based on the given boxsize.\ngenΣ(::Type{θ}): Returns an instance of theΣ_xynbs` type, initialized with default values.\n\nNotes\n\nAll function are Parametric in the type T, which is expected to be a subtype of Real.\n\nConcrete Models\n\nxynb: A 2D Gaussian model that includes parameters for the x and y coordinates, sum intensity, and background. \nxynbs: An extended version of xynb that also includes an additional term for the PSF width, σ_PSF.\n\nInternal Constants\n\nMODEL_MAP: A dictionary that associates model symbols with their corresponding concrete types, facilitating internal model selection and mapping.\n\n\n\n\n\n","category":"module"},{"location":"GaussModel/#API","page":"GaussModel","title":"API","text":"","category":"section"},{"location":"GaussModel/","page":"GaussModel","title":"GaussModel","text":"Modules = [GaussModel]","category":"page"},{"location":"GaussModel/","page":"GaussModel","title":"GaussModel","text":"Modules = [GaussModel]","category":"page"},{"location":"GaussFit/","page":"GaussFit","title":"GaussFit","text":"CurrentModule = GaussMLE.GaussFit\nDocTestSetup = quote\n    using GaussMLE\nend","category":"page"},{"location":"GaussFit/#GaussMLE.GaussFit","page":"GaussFit","title":"GaussMLE.GaussFit","text":"","category":"section"},{"location":"GaussFit/#Overview","page":"GaussFit","title":"Overview","text":"","category":"section"},{"location":"GaussFit/","page":"GaussFit","title":"GaussFit","text":"GaussFit","category":"page"},{"location":"GaussFit/#GaussMLE.GaussFit","page":"GaussFit","title":"GaussMLE.GaussFit","text":"GaussFit\n\nThe GaussFit module provides functions for fitting Gaussian models to a 2D box or a stack of 2D \"boxes\" of data.\n\nThe fitstack function is the primary exported function of GaussMLE.jl.  It takes in a 3D array containing the data to be fitted,  a symbol indicating the type of Gaussian model to fit,  and additional model-specific arguments required for fitting.  It returns an array of fitted parameters for each 2D box and  an array of uncertainties for each set of fitted parameters.\n\nThe fitstack function also accepts optional keyword arguments for specifying  a camera variance image and the top left corners of the boxes in relation to the variance image. These are used to implement a variance-weighted fit as described by Huang et al. \n\nExported Functions\n\nfitstack: Fit Gaussian models to each box in a stack of 2D \"boxes\" of data.\n\nNotes\n\nData and Variance image must be in units of photons (Poisson distributed).\n\n\n\n\n\n","category":"module"},{"location":"GaussFit/#API","page":"GaussFit","title":"API","text":"","category":"section"},{"location":"GaussFit/","page":"GaussFit","title":"GaussFit","text":"Modules = [GaussFit]","category":"page"},{"location":"GaussFit/","page":"GaussFit","title":"GaussFit","text":"Modules = [GaussFit]","category":"page"},{"location":"GaussFit/#GaussMLE.GaussFit.calclogL-Union{Tuple{T}, Tuple{GaussMLE.GaussModel.GaussMLEParams{T}, AbstractArray{T}, GaussMLE.GaussModel.GaussMLEArgs}} where T<:Real","page":"GaussFit","title":"GaussMLE.GaussFit.calclogL","text":"calclogL(θ::GaussMLEParams{T}, box::AbstractArray{T}, args::GaussMLEArgs) where {T<:Real}\n\nCalculate the log-likelihood of a Gaussian MLE fit for a given set of parameters and data.\n\nArguments\n\nθ::GaussMLEParams{T}: A GaussMLEParams object containing the parameters of the Gaussian MLE fit.\nbox::AbstractArray{T}: An AbstractArray containing the data to fit.\nargs::GaussMLEArgs: A GaussMLEArgs object containing additional arguments for the fit.\n\nReturns\n\nlogL: The log-likelihood of the fit.\n\n\n\n\n\n","category":"method"},{"location":"GaussFit/#GaussMLE.GaussFit.crlb!-Union{Tuple{T}, Tuple{GaussMLE.GaussModel.GaussMLEΣ{T}, AbstractArray{T}, GaussMLE.GaussModel.GaussMLEParams{T}, Int64, GaussMLE.GaussModel.GaussMLEArgs}} where T<:Real","page":"GaussFit","title":"GaussMLE.GaussFit.crlb!","text":"crlb!(Σ::GaussMLEΣ{T}, grad_pixel::AbstractArray{T}, θ::GaussMLEParams{T}, boxsize::Int, args::GaussMLEArgs)\n\nCalculate the Cramer-Rao lower bound (CRLB) for a given set of parameters and data.\n\nArguments\n\nΣ::GaussMLEΣ{T}: A GaussMLEΣ object to store the CRLB values.\ngrad_pixel::AbstractArray{T}: An AbstractArray to store the gradient values.\nθ::GaussMLEParams{T}: A GaussMLEParams object containing the parameters of the Gaussian MLE fit.\nboxsize::Int: The size of the box to fit.\nargs::GaussMLEArgs: A GaussMLEArgs object containing additional arguments for the fit.\n\n\n\n\n\n","category":"method"},{"location":"GaussFit/#GaussMLE.GaussFit.fitbox!-Union{Tuple{T}, Tuple{GaussMLE.GaussModel.GaussMLEParams{T}, GaussMLE.GaussModel.GaussMLEΣ{T}, AbstractArray{T}, GaussMLE.GaussModel.GaussMLEArgs, Union{AbstractArray{T}, T}, Union{AbstractArray{T}, T}}} where T<:Real","page":"GaussFit","title":"GaussMLE.GaussFit.fitbox!","text":"fitbox!(θ::GaussMLEParams{T}, Σ::GaussMLEΣ{T}, box::AbstractArray{T}, args::GaussMLEArgs,\n        varimage::Union{T,AbstractArray{T}}, boxcorners::Union{T,AbstractArray{T}};\n        maxiter::Int = 100) where {T<:Real}\n\nFits a Gaussian blob model using maximum likelihood estimation and Poisson noise model to a single 2D \"box\" of data.\n\nArguments\n\nθ::GaussMLEParams{T}: Initial parameters for the Gaussian MLE model.\nΣ::GaussMLEΣ{T}: Container for the calculated Cramer-Rao Lower Bound (CRLB) and log likelihood.\nbox::AbstractArray{T}: 2D array containing the data to be fitted.\nargs::GaussMLEArgs: Additional arguments required for fitting.\nvarimage::Union{T,AbstractArray{T}}: Camera readnoise variance image, or a single variance for all pixels.\nboxcorners::Union{T,AbstractArray{T}}: The corners of the box in the full image. Used when varimage is an image.\n\nKeyword Arguments\n\nmaxiter::Int: Maximum number of iterations for the fitting process (default is 100).\n\nOutput\n\nUpdates θ and Σ in-place with the fitted parameters and their uncertainties.\n\nNotes\n\nThis function performs iterative fitting and stops either when the fit converges or when it reaches maxiter iterations. \nThe input box must be a square 2D array.\nInput data box is assumed to be background subtracted.\n\n\n\n\n\n","category":"method"},{"location":"GaussFit/#GaussMLE.GaussFit.fitstack-Union{Tuple{T}, Tuple{AbstractArray{T}, Symbol, GaussMLE.GaussModel.GaussMLEArgs{T}}} where T<:Real","page":"GaussFit","title":"GaussMLE.GaussFit.fitstack","text":"fitstack(stack::AbstractArray{T}, modelsymbol::Symbol, args::GaussMLEArgs{T};             varimage::Union{T,AbstractArray{T}}=T(0),              boxcorners::Union{T,AbstractArray{T}}=T(0)) where T <: Real\n\nFit Gaussian models to each box in a stack of 2D \"boxes\" of data.\n\nArguments\n\nstack::AbstractArray{T}: 3D array containing the data to be fitted. Each slice along the third dimension is treated as a separate 2D box.\nmodelsymbol::Symbol: Symbol indicating the type of Gaussian model to fit.\nargs::GaussMLEArgs{T}: Additional model-specific arguments required for fitting.\n\nKeyword Arguments\n\nvarimage::Union{T,AbstractArray{T}}: Camera variance image, or a single variance for all pixels (default is T(0)).\nboxcorners::Union{T,AbstractArray{T}}: The top left corners of the boxes in the variance image (default is T(0)).\n\nReturns\n\nθ: Array of fitted parameters for each 2D box.\nΣ: Array of uncertainties for each set of fitted parameters.\n\nNotes\n\nData and Variance image must be in units of photons (Poisson distributed).\n\nExample\n\nfitstack(stack, :xynb, args; varimage=myvarimage, boxcorners=myboxcorners)\n\n\n\n\n\n","category":"method"},{"location":"GaussLib/","page":"GaussLib","title":"GaussLib","text":"CurrentModule = GaussMLE.GaussLib\nDocTestSetup = quote\n    using GaussMLE\nend","category":"page"},{"location":"GaussLib/#GaussMLE.GaussLib","page":"GaussLib","title":"GaussMLE.GaussLib","text":"","category":"section"},{"location":"GaussLib/#Overview","page":"GaussLib","title":"Overview","text":"","category":"section"},{"location":"GaussLib/","page":"GaussLib","title":"GaussLib","text":"GaussLib","category":"page"},{"location":"GaussLib/#GaussMLE.GaussLib","page":"GaussLib","title":"GaussMLE.GaussLib","text":"GaussLib\n\nLow level functions for calcualting the Gaussian model and its derivatives.\n\n\n\n\n\n","category":"module"},{"location":"GaussLib/#API","page":"GaussLib","title":"API","text":"","category":"section"},{"location":"GaussLib/","page":"GaussLib","title":"GaussLib","text":"Modules = [GaussLib]","category":"page"},{"location":"GaussLib/","page":"GaussLib","title":"GaussLib","text":"Modules = [GaussLib]","category":"page"},{"location":"GaussLib/#GaussMLE.GaussLib.center_of_mass_2d-Union{Tuple{T}, Tuple{Int64, Array{T}}} where T<:Real","page":"GaussLib","title":"GaussMLE.GaussLib.center_of_mass_2d","text":"center_of_mass_2d(sz::Int, data::Array{T}) where T <: Real\n\nCompute the center of mass of a square 2D data array.\n\n\n\n\n\n","category":"method"},{"location":"GaussLib/#GaussMLE.GaussLib.compute_alpha-Union{Tuple{T}, NTuple{4, T}} where T<:Real","page":"GaussLib","title":"GaussMLE.GaussLib.compute_alpha","text":"compute_alpha(z::T, Ax::T, Bx::T, d::T) where T <: Real\n\nCompute the alpha value based on the given parameters.\n\n\n\n\n\n","category":"method"},{"location":"GaussLib/#GaussMLE.GaussLib.derivative_alpha_z-Union{Tuple{T}, NTuple{4, T}} where T<:Real","page":"GaussLib","title":"GaussMLE.GaussLib.derivative_alpha_z","text":"derivative_alpha_z(z::T, Ax::T, Bx::T, d::T) where T <: Real\n\nCompute the derivative of alpha with respect to z.\n\n\n\n\n\n","category":"method"},{"location":"GaussLib/#GaussMLE.GaussLib.derivative_integral_gaussian_1d-Union{Tuple{T}, Tuple{Int64, Vararg{T, 4}}} where T<:Real","page":"GaussLib","title":"GaussMLE.GaussLib.derivative_integral_gaussian_1d","text":"derivative_integral_gaussian_1d(ii::Int, x::T, sigma::T, N::T, PSFy::T) where T <: Real\n\nCompute the derivative of the integral of a 1D Gaussian function with respect to x.\n\n\n\n\n\n","category":"method"},{"location":"GaussLib/#GaussMLE.GaussLib.derivative_integral_gaussian_1d_sigma-Union{Tuple{T}, Tuple{Int64, Vararg{T, 4}}} where T<:Real","page":"GaussLib","title":"GaussMLE.GaussLib.derivative_integral_gaussian_1d_sigma","text":"derivative_integral_gaussian_1d_sigma(i::Int, x::T, Sx::T, N::T, PSFy::T) where T <: Real\n\nCompute the derivative of the integral of a 1D Gaussian function with respect to sigma.\n\n\n\n\n\n","category":"method"},{"location":"GaussLib/#GaussMLE.GaussLib.derivative_integral_gaussian_2d_sigma-Union{Tuple{T}, Tuple{Int64, Int64, Vararg{T, 6}}} where T<:Real","page":"GaussLib","title":"GaussMLE.GaussLib.derivative_integral_gaussian_2d_sigma","text":"derivative_integral_gaussian_2d_sigma(i::Int, j::Int, x::T, y::T, S::T, N::T, PSFx::T, PSFy::T) where T <: Real\n\nCompute the derivative of the integral of a 2D Gaussian function with respect to sigma.\n\n\n\n\n\n","category":"method"},{"location":"GaussLib/#GaussMLE.GaussLib.gaussian_max_min_2d-Union{Tuple{T}, Tuple{Int64, T, Array{T}}} where T<:Real","page":"GaussLib","title":"GaussMLE.GaussLib.gaussian_max_min_2d","text":"gaussian_max_min_2d(sz::Int, sigma::T, data::Array{T}) where T <: Real\n\nCompute the maximum and minimum values after applying a Gaussian filter to a 2D data array.\n\n\n\n\n\n","category":"method"},{"location":"GaussLib/#GaussMLE.GaussLib.integral_gaussian_1d-Union{Tuple{T}, Tuple{Int64, T, T}} where T<:Real","page":"GaussLib","title":"GaussMLE.GaussLib.integral_gaussian_1d","text":"integral_gaussian_1d(ii::Int, position::T, sigma::T) where T <: Real\n\nCalculate the integral of a 1D Gaussian function.\n\n\n\n\n\n","category":"method"},{"location":"GaussLib/#GaussMLE.GaussLib.second_derivative_alpha_z-Union{Tuple{T}, NTuple{4, T}} where T<:Real","page":"GaussLib","title":"GaussMLE.GaussLib.second_derivative_alpha_z","text":"second_derivative_alpha_z(z::T, Ax::T, Bx::T, d::T) where T <: Real\n\nCompute the second derivative of alpha with respect to z.\n\n\n\n\n\n","category":"method"},{"location":"","page":"GaussMLE","title":"GaussMLE","text":"CurrentModule = GaussMLE","category":"page"},{"location":"#GaussMLE","page":"GaussMLE","title":"GaussMLE","text":"","category":"section"},{"location":"","page":"GaussMLE","title":"GaussMLE","text":"Documentation for GaussMLE.","category":"page"},{"location":"#Overview","page":"GaussMLE","title":"Overview","text":"","category":"section"},{"location":"","page":"GaussMLE","title":"GaussMLE","text":"GaussMLE provides a fast method for performing Maximum Likelihood Estimation (MLE) of Gaussian blob parameters under a Poisson noise model.  The form of the Gaussian expectation models are:","category":"page"},{"location":"","page":"GaussMLE","title":"GaussMLE","text":"mu(theta)_ij = b + n int_i-05^i+05 int_j-05^j+05 \nmathcalN(theta_x - j sigma_x^2)\nmathcalN(theta_y - i sigma_y^2)","category":"page"},{"location":"","page":"GaussMLE","title":"GaussMLE","text":"$ x,y $: Location of blob center\n$ n $: Integrated intenstity in the blob (does not include background)\n$ b $: Background counts per pixel\n$ \\sigma $: Width of Gaussian blob   \n$ i,j $: Pixel location (column major)","category":"page"},{"location":"","page":"GaussMLE","title":"GaussMLE","text":"The models differ by how they treat sigma_x and sigma_y.  ","category":"page"},{"location":"","page":"GaussMLE","title":"GaussMLE","text":"Symbol theta^top sigma_x sigma_y\n:xynb xynb sigma_x = sigma_y = sigma_PSF\n:xynbs xynbsigma_mathrmPSF sigma_x = sigma_y = theta_sigma_mathrmPSF\n:xynbsxsy xynbsigma_mathrmxsigma_mathrmy sigma_x = theta_sigma_mathrmx sigma_y = theta_sigma_mathrmy\n:xynbz xynbz sigma_x = sigma_mathrmx(theta_z)  sigma_y = sigma_mathrmy(theta_z)","category":"page"},{"location":"#Usage","page":"GaussMLE","title":"Usage","text":"","category":"section"}]
}
